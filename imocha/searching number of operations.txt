import java.util.*;
import java.io.*;
import java.lang.Math;

public class Main
{
  public static void minOperations(int N, ArrayList<Integer> A)
  {

    //this is default OUTPUT. You can change it.
    int leftSum = 0;
    int rightSum = 0;
    
    //write your Logic here:
    if(N == 1){
        
        System.out.println("1 " + A.get(0) + " 2");
        
    }else if(N % 2 == 0){

        leftSum = A.subList(0, N/2).stream().mapToInt(a -> a).sum();
        rightSum = A.subList(N/2, N).stream().mapToInt(a -> a).sum();
        
        if(leftSum < rightSum){
            
            System.out.println("2 " + (rightSum - leftSum) + " 1 0 " + (N+2));
            
        }else if(leftSum > rightSum){
            
            System.out.println("2 0 1 " + (leftSum - rightSum) + " " + (N+2));
            
        }else{
            
            System.out.println(0);
            
        }
        
    }else{
        
        leftSum = A.subList(0, N/2).stream().mapToInt(a -> a).sum();
        rightSum = A.subList(N/2, N).stream().mapToInt(a -> a).sum();
        
        if(leftSum < rightSum){
            
            System.out.println("1 " + (rightSum - leftSum) + " 1");
            
        }else if(leftSum > rightSum){
            
            leftSum = A.subList(0, N/2+1).stream().mapToInt(a -> a).sum();
            rightSum = A.subList(N/2+1, N).stream().mapToInt(a -> a).sum();
            
            System.out.println("1 " + (leftSum - rightSum) + " " + N);
        }
    }
  }

  public static void main (String[]args)
  {
    Scanner sc = new Scanner (System.in);

    //INPUT [uncomment & modify if required]
    // 5 1 2 0 4 5         1 6 1
    // 4 2 2 2 1           2 0 1 1 6
    // 1 10                1 10 2
    // 2 2 2               0
    // 5 4 3 1 5 3         1 2 1
    // 3 1 1 1             1 1 4
    
    int N = sc.nextInt ();
    ArrayList<Integer> A = new ArrayList<Integer>(N);

    for (int i = 0; i < N; i++)
    {
	    A.add(sc.nextInt());
    }
    sc.close ();

    //OUTPUT [uncomment & modify if required]
    minOperations(N, A);
  }
}