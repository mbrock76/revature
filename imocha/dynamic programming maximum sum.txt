import java.util.*; 
import java.lang.*;
import java.io.*;
import java.lang.Math;

public class Main {

    static Stack <Integer> x = new Stack <Integer>();
    static Stack <Integer> y = new Stack <Integer>();
    static int N = 3;
    static int M = 3;
    static int result = 0;
    static int tempSum = 0;
    static int[][] A = {{1,3,3},{2,1,4},{0,6,4}};
    static Boolean visited[][];
    
    public static int maxSum() {
        
        //this is default OUTPUT. You can change it.
        Boolean temp[][] = new Boolean[N][M];
        visited = temp;
        
        //write your Logic here
        for(int i = 0; i < N; i++){
            System.out.println(visited[0][0]);
            x.clear();
            y.clear();
            clearVisited();
            
            x.push(0);
            y.push(i);
            tempSum = A[y.peek()][x.peek()];
            
            dfs();
            
        }
        
        return result;
    }
    
    public static void dfs(){
    
        System.out.println("Y: " + y.peek() + "   X: " + x.peek() + "   " + tempSum + "\n");
        
        if(x.peek() + 1 < M){
        
            if(y.peek() - 1 >= 0 && !visited[y.peek() - 1][x.peek() + 1]){
                
                tempSum += A[y.peek() - 1][x.peek() + 1];
                visited[y.peek() - 1][x.peek() + 1] = true;
                y.push(y.peek() - 1);
                x.push(x.peek() + 1);
                dfs();
                
            }else if(!visited[y.peek()][x.peek() + 1]){
                
                tempSum += A[y.peek()][x.peek() + 1];
                visited[y.peek()][x.peek() + 1] = true;
                y.push(y.peek());
                x.push(x.peek() + 1);
                dfs();
                
            }else if(y.peek() + 1 < N && !visited[y.peek() + 1][x.peek() + 1]){
                
                tempSum += A[y.peek() + 1][x.peek() + 1];
                visited[y.peek() + 1][x.peek() + 1] = true;
                y.push(y.peek() + 1);
                x.push(x.peek() + 1);
                dfs();
            }else if(x.peek() == 1){
                
                visited[0][2] = false;
                visited[1][2] = false;
                visited[2][2] = false;
                
                tempSum -= A[y.peek()][x.peek()];
                x.pop();
                y.pop();
                dfs();
            }
        }else{
            
            if(tempSum > result){
                result = tempSum;
            }
            tempSum -= A[y.peek()][x.peek()];
            y.pop();
            x.pop();
            dfs();
        }
    }
    
    public static void clearVisited(){
    
        for(int i=0; i<N; i++) {
            for(int j=0; j<M; j++) {
                visited[i][j] = false;
            }
        }
    }
    
    public static void main(String[] args) {
        
        // INPUT [uncomment & modify if required]
        // 3 3 1 3 3 2 1 4 0 6 4
        // 12
        // 3 3 1 2 3 4 5 6 0 6 4
        // 16
        // 3 3 1 2 3 4 5 6 7 8 9
        // 24
        // 3 3 1 0 1 0 1 0 1 1 1
        // 3
        // 3 3 1 1 1 1 1 1 1 1 1
        // 3
        // 3 3 1 2 1 1 1 1 1 2 1
        // 4
        
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        M = sc.nextInt();
        int temp [][] = new int[N][M];
        for(int i=0; i<N; i++) {
            for(int j=0; j<M; j++) {
                A[i][j] = sc.nextInt();
            }
        }
        A = temp;
	sc.close();
        
        OUTPUT [uncomment & modify if required]
        System.out.print(maxSum());
        

    }
}